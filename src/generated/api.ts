/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * III-Exhibition works-HAI
 * API specification for interactions between Frontend, Backend, and Cloud Storage.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetAiDrawing200,
  GetDevAiDrawing200,
  GetUploadUrl200,
  GetUploadUrl400,
  PostSavedUrl200,
  PostSavedUrl400,
  PostSavedUrlBody
} from './model'



/**
 * Retrieve presigned URLs for downloading surrounding drawings from cloud storage.
 * @summary Get presigned URLs for surrounding drawings
 */
export const getUploadUrl = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUploadUrl200>> => {
    
    return axios.get(
      `/upload-url`,options
    );
  }


export const getGetUploadUrlQueryKey = () => {
    return [`/upload-url`] as const;
    }

    
export const getGetUploadUrlQueryOptions = <TData = Awaited<ReturnType<typeof getUploadUrl>>, TError = AxiosError<GetUploadUrl400>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUploadUrl>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUploadUrlQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUploadUrl>>> = ({ signal }) => getUploadUrl({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUploadUrl>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUploadUrlQueryResult = NonNullable<Awaited<ReturnType<typeof getUploadUrl>>>
export type GetUploadUrlQueryError = AxiosError<GetUploadUrl400>

/**
 * @summary Get presigned URLs for surrounding drawings
 */
export const useGetUploadUrl = <TData = Awaited<ReturnType<typeof getUploadUrl>>, TError = AxiosError<GetUploadUrl400>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUploadUrl>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUploadUrlQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUploadUrlSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getUploadUrl>>, TError = AxiosError<GetUploadUrl400>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getUploadUrl>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUploadUrlQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUploadUrl>>> = ({ signal }) => getUploadUrl({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getUploadUrl>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUploadUrlSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getUploadUrl>>>
export type GetUploadUrlSuspenseQueryError = AxiosError<GetUploadUrl400>

/**
 * @summary Get presigned URLs for surrounding drawings
 */
export const useGetUploadUrlSuspense = <TData = Awaited<ReturnType<typeof getUploadUrl>>, TError = AxiosError<GetUploadUrl400>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getUploadUrl>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUploadUrlSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Save drawing URL in storage to BE
 * @summary Save drawing URL
 */
export const postSavedUrl = (
    postSavedUrlBody: PostSavedUrlBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostSavedUrl200>> => {
    
    return axios.post(
      `/saved-url`,
      postSavedUrlBody,options
    );
  }



export const getPostSavedUrlMutationOptions = <TError = AxiosError<PostSavedUrl400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSavedUrl>>, TError,{data: PostSavedUrlBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postSavedUrl>>, TError,{data: PostSavedUrlBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSavedUrl>>, {data: PostSavedUrlBody}> = (props) => {
          const {data} = props ?? {};

          return  postSavedUrl(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSavedUrlMutationResult = NonNullable<Awaited<ReturnType<typeof postSavedUrl>>>
    export type PostSavedUrlMutationBody = PostSavedUrlBody
    export type PostSavedUrlMutationError = AxiosError<PostSavedUrl400>

    /**
 * @summary Save drawing URL
 */
export const usePostSavedUrl = <TError = AxiosError<PostSavedUrl400>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSavedUrl>>, TError,{data: PostSavedUrlBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postSavedUrl>>,
        TError,
        {data: PostSavedUrlBody},
        TContext
      > => {

      const mutationOptions = getPostSavedUrlMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Retrieve presigned URLs for downloading surrounding drawings from cloud storage.
 * @summary Get presigned URLs for surrounding drawings
 */
export const getAiDrawing = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAiDrawing200>> => {
    
    return axios.get(
      `/ai-drawing`,options
    );
  }


export const getGetAiDrawingQueryKey = () => {
    return [`/ai-drawing`] as const;
    }

    
export const getGetAiDrawingQueryOptions = <TData = Awaited<ReturnType<typeof getAiDrawing>>, TError = AxiosError<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAiDrawing>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAiDrawingQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAiDrawing>>> = ({ signal }) => getAiDrawing({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAiDrawing>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAiDrawingQueryResult = NonNullable<Awaited<ReturnType<typeof getAiDrawing>>>
export type GetAiDrawingQueryError = AxiosError<void>

/**
 * @summary Get presigned URLs for surrounding drawings
 */
export const useGetAiDrawing = <TData = Awaited<ReturnType<typeof getAiDrawing>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAiDrawing>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAiDrawingQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAiDrawingSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getAiDrawing>>, TError = AxiosError<void>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAiDrawing>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAiDrawingQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAiDrawing>>> = ({ signal }) => getAiDrawing({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAiDrawing>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAiDrawingSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getAiDrawing>>>
export type GetAiDrawingSuspenseQueryError = AxiosError<void>

/**
 * @summary Get presigned URLs for surrounding drawings
 */
export const useGetAiDrawingSuspense = <TData = Awaited<ReturnType<typeof getAiDrawing>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAiDrawing>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAiDrawingSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Retrieve surrounding drawings only for dev mode.
 * @summary Get 4 surrounding AI-drawings
 */
export const getDevAiDrawing = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetDevAiDrawing200>> => {
    
    return axios.get(
      `/dev/ai-drawing`,options
    );
  }


export const getGetDevAiDrawingQueryKey = () => {
    return [`/dev/ai-drawing`] as const;
    }

    
export const getGetDevAiDrawingQueryOptions = <TData = Awaited<ReturnType<typeof getDevAiDrawing>>, TError = AxiosError<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDevAiDrawing>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDevAiDrawingQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDevAiDrawing>>> = ({ signal }) => getDevAiDrawing({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDevAiDrawing>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDevAiDrawingQueryResult = NonNullable<Awaited<ReturnType<typeof getDevAiDrawing>>>
export type GetDevAiDrawingQueryError = AxiosError<void>

/**
 * @summary Get 4 surrounding AI-drawings
 */
export const useGetDevAiDrawing = <TData = Awaited<ReturnType<typeof getDevAiDrawing>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDevAiDrawing>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDevAiDrawingQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetDevAiDrawingSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getDevAiDrawing>>, TError = AxiosError<void>>( options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDevAiDrawing>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDevAiDrawingQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDevAiDrawing>>> = ({ signal }) => getDevAiDrawing({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDevAiDrawing>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDevAiDrawingSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getDevAiDrawing>>>
export type GetDevAiDrawingSuspenseQueryError = AxiosError<void>

/**
 * @summary Get 4 surrounding AI-drawings
 */
export const useGetDevAiDrawingSuspense = <TData = Awaited<ReturnType<typeof getDevAiDrawing>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getDevAiDrawing>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDevAiDrawingSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




